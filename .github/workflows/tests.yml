name: Tests
on:
  push:
    branches:
      - master
      - dev
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          pipx install ruff
          ruff check
          ruff format
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      # if one python version fails, let the others finish
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Install chromium
        run: |
          apt-get update
          apt-get install -y chromium-browser
      - name: Run tests
        run: |
          poetry run pytest -vv --disable-warnings --cov-report xml:cov.xml --cov=pywitness .
      # - name: Upload Code Coverage
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: ./cov.xml
      #     verbose: true

  publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry build
          poetry self add "poetry-dynamic-versioning[plugin]"

      - name: Get current version from Poetry
        id: get_version
        run: |
          VERSION=$(poetry version --short)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Fetch latest tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Retrieve and strip "v" prefix if present
        run: |
          # Retrieve and strip "v" prefix if present
          CURRENT_VERSION="${{ env.VERSION }}"
          LATEST_VERSION="${{ env.LATEST_TAG }}"
          CURRENT_VERSION="${CURRENT_VERSION#v}"
          LATEST_VERSION="${LATEST_VERSION#v}"
          
          # Extract major.minor for comparison
          CURRENT_MAJOR_MINOR=$(echo "$CURRENT_VERSION" | cut -d '.' -f 1-2)
          LATEST_MAJOR_MINOR=$(echo "$LATEST_VERSION" | cut -d '.' -f 1-2)

          # Compare versions
          if [ "$CURRENT_MAJOR_MINOR" == "$LATEST_MAJOR_MINOR" ]; then
            echo "VERSION_CHANGE=false" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGE=true" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          VERSION: ${{ env.VERSION }}  # dynamically passed VERSION variable
          LATEST_TAG: ${{ env.LATEST_TAG }}  # dynamically passed LATEST_TAG variable

      - name: Build PyPi package
        if: github.ref == 'refs/heads/main' && env.VERSION_CHANGE == 'true'
        run: python -m build

      - name: Publish PyPi package
        if: github.ref == 'refs/heads/main' && env.VERSION_CHANGE == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1.5
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Tag the release if major or minor version changed
        if: github.ref == 'refs/heads/main' && env.VERSION_CHANGE == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
          git push origin "refs/tags/${{ env.VERSION }}"
